#include <gtest/gtest.h>
#include "vec2.hpp"

// DISCLAIMER: This test generated by AI

TEST(Vec2Test, Vec2AdditionInt) {
    vec2<int> v1{1, 2};
    vec2<int> v2{4, 5};
    vec2<int> result = v1 + v2;
    EXPECT_EQ(result.x, 5);
    EXPECT_EQ(result.y, 7);
}

TEST(Vec2Test, Vec2SubtractionFloat) {
    vec2<float> v1{1.0f, 2.0f};
    vec2<float> v2{0.5f, 1.0f};
    vec2<float> result = v1 - v2;
    EXPECT_FLOAT_EQ(result.x, 0.5f);
    EXPECT_FLOAT_EQ(result.y, 1.0f);
}

TEST(Vec2Test, Vec2MultiplicationInt) {
    vec2<int> v1{2, 3};
    vec2<int> v2{5, 6};
    vec2<int> result = v1 * v2;
    EXPECT_EQ(result.x, 10);
    EXPECT_EQ(result.y, 18);
}

TEST(Vec2Test, Vec2DivisionFloat) {
    vec2<float> v1{10.0f, 20.0f};
    vec2<float> v2{2.0f, 4.0f};
    vec2<float> result = v1 / v2;
    EXPECT_FLOAT_EQ(result.x, 5.0f);
    EXPECT_FLOAT_EQ(result.y, 5.0f);
}

TEST(Vec2Test, ScalarAdditionInt) {
    vec2<int> v{1, 2};
    vec2<int> result = v + 5;
    EXPECT_EQ(result.x, 6);
    EXPECT_EQ(result.y, 7);
}

TEST(Vec2Test, ScalarSubtractionFloat) {
    vec2<float> v{5.0f, 6.0f};
    vec2<float> result = v - 2.5f;
    EXPECT_FLOAT_EQ(result.x, 2.5f);
    EXPECT_FLOAT_EQ(result.y, 3.5f);
}

TEST(Vec2Test, ScalarMultiplicationInt) {
    vec2<int> v{2, 3};
    vec2<int> result = v * 3;
    EXPECT_EQ(result.x, 6);
    EXPECT_EQ(result.y, 9);
}

TEST(Vec2Test, ScalarDivisionFloat) {
    vec2<float> v{10.0f, 12.0f};
    vec2<float> result = v / 2.0f;
    EXPECT_FLOAT_EQ(result.x, 5.0f);
    EXPECT_FLOAT_EQ(result.y, 6.0f);
}

TEST(Vec2Test, ScalarAdditionFriendInt) {
    vec2<int> v{1, 2};
    vec2<int> result = 5 + v;
    EXPECT_EQ(result.x, 6);
    EXPECT_EQ(result.y, 7);
}

TEST(Vec2Test, ScalarSubtractionFriendFloat) {
    vec2<float> v{1.0f, 2.0f};
    vec2<float> result = 5.0f - v;
    EXPECT_FLOAT_EQ(result.x, 4.0f);
    EXPECT_FLOAT_EQ(result.y, 3.0f);
}

TEST(Vec2Test, ScalarMultiplicationFriendInt) {
    vec2<int> v{2, 3};
    vec2<int> result = 3 * v;
    EXPECT_EQ(result.x, 6);
    EXPECT_EQ(result.y, 9);
}

TEST(Vec2Test, ScalarDivisionFriendFloat) {
    vec2<float> v{2.0f, 3.0f};
    vec2<float> result = 10.0f / v;
    EXPECT_FLOAT_EQ(result.x, 5.0f);
    EXPECT_FLOAT_EQ(result.y, 10.0f / 3.0f);
}

TEST(Vec2Test, Vec2AbsInt) {
    vec2<int> v{-1, 2};
    vec2<int> result = abs(v);
    EXPECT_EQ(result.x, 1);
    EXPECT_EQ(result.y, 2);
}

TEST(Vec2Test, Vec2AbsFloat) {
    vec2<float> v{-1.5f, 2.5f};
    vec2<float> result = abs(v);
    EXPECT_FLOAT_EQ(result.x, 1.5f);
    EXPECT_FLOAT_EQ(result.y, 2.5f);
}

TEST(Vec2Test, Vec2AbsMemberFunctionInt) {
    vec2<int> v{-3, 4};
    v = abs(v);
    EXPECT_EQ(v.x, 3);
    EXPECT_EQ(v.y, 4);
}

TEST(Vec2Test, Vec2AbsMemberFunctionFloat) {
    vec2<float> v{-3.5f, 4.5f};
    v = abs(v);
    EXPECT_FLOAT_EQ(v.x, 3.5f);
    EXPECT_FLOAT_EQ(v.y, 4.5f);
}

