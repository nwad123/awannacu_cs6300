#include "core.hpp"
#include <fmt/core.h>
#include <gtest/gtest.h>
#include <filesystem>
#include <fstream>
#include <vector>
#include <cstdint>

// DISCLAIMER: Test suite generated by AI.

TEST(ReadInputTest, ValidFile) {
    std::filesystem::path testFile = "__test__.raw";
    std::vector<int16_t> expectedData = {1, 2, 3, 4, 5};

    {
        std::ofstream outFile(testFile, std::ios::binary);
        outFile.write(reinterpret_cast<const char*>(expectedData.data()), static_cast<std::streamsize>(expectedData.size() * sizeof(uint16_t)));
    }

    std::vector<int16_t> actualData = read_input(testFile);
    EXPECT_EQ(actualData, expectedData);

    std::filesystem::remove(testFile);
}

TEST(ReadInputTest, InvalidExtension) {
    std::filesystem::path testFile = "__test__.txt";

    {
        std::ofstream outFile(testFile, std::ios::binary);
        int16_t testData[] = {1, 2, 3};
        outFile.write(reinterpret_cast<const char*>(testData), sizeof(testData));
    }

    std::vector<int16_t> actualData = read_input(testFile);
    EXPECT_TRUE(actualData.empty());

    std::filesystem::remove(testFile);
}

TEST(ReadInputTest, EmptyFile) {
    std::filesystem::path testFile = "__empty__.raw";
    std::ofstream outFile(testFile);
    outFile.close();

    std::vector<int16_t> actualData = read_input(testFile);
    EXPECT_TRUE(actualData.empty());

    std::filesystem::remove(testFile);
}

TEST(ReadInputTest, InvalidFileSize) {
    std::filesystem::path testFile = "__invalid_size__.raw";
    {
        std::ofstream outFile(testFile, std::ios::binary);
        uint8_t invalidData[] = {1, 2, 3}; // 3 bytes, not multiple of uint16_t
        outFile.write(reinterpret_cast<const char*>(invalidData), sizeof(invalidData));
    }

    std::vector<int16_t> actualData = read_input(testFile);
    EXPECT_TRUE(actualData.empty());

    std::filesystem::remove(testFile);
}

TEST(ReadInputTest, NonExistentFile){
    std::filesystem::path testFile = "__does_not_exist__.raw";

    std::vector<int16_t> actualData = read_input(testFile);
    EXPECT_TRUE(actualData.empty());

}
