#include <gtest/gtest.h>
#include "vec3.hpp"

// DISCLAIMER: This test suite also generated by AI :)
// I can write my own code, I promise

TEST(Vec3Test, Vec3AdditionInt) {
    vec3<int> v1{1, 2, 3};
    vec3<int> v2{4, 5, 6};
    vec3<int> result = v1 + v2;
    EXPECT_EQ(result.x, 5);
    EXPECT_EQ(result.y, 7);
    EXPECT_EQ(result.z, 9);
}

TEST(Vec3Test, Vec3SubtractionFloat) {
    vec3<float> v1{1.0f, 2.0f, 3.0f};
    vec3<float> v2{0.5f, 1.0f, 1.5f};
    vec3<float> result = v1 - v2;
    EXPECT_FLOAT_EQ(result.x, 0.5f);
    EXPECT_FLOAT_EQ(result.y, 1.0f);
    EXPECT_FLOAT_EQ(result.z, 1.5f);
}

TEST(Vec3Test, Vec3MultiplicationInt) {
    vec3<int> v1{2, 3, 4};
    vec3<int> v2{5, 6, 7};
    vec3<int> result = v1 * v2;
    EXPECT_EQ(result.x, 10);
    EXPECT_EQ(result.y, 18);
    EXPECT_EQ(result.z, 28);
}

TEST(Vec3Test, Vec3DivisionFloat) {
    vec3<float> v1{10.0f, 20.0f, 30.0f};
    vec3<float> v2{2.0f, 4.0f, 5.0f};
    vec3<float> result = v1 / v2;
    EXPECT_FLOAT_EQ(result.x, 5.0f);
    EXPECT_FLOAT_EQ(result.y, 5.0f);
    EXPECT_FLOAT_EQ(result.z, 6.0f);
}

TEST(Vec3Test, ScalarAdditionInt) {
    vec3<int> v{1, 2, 3};
    vec3<int> result = v + 5;
    EXPECT_EQ(result.x, 6);
    EXPECT_EQ(result.y, 7);
    EXPECT_EQ(result.z, 8);
}

TEST(Vec3Test, ScalarSubtractionFloat) {
    vec3<float> v{5.0f, 6.0f, 7.0f};
    vec3<float> result = v - 2.5f;
    EXPECT_FLOAT_EQ(result.x, 2.5f);
    EXPECT_FLOAT_EQ(result.y, 3.5f);
    EXPECT_FLOAT_EQ(result.z, 4.5f);
}

TEST(Vec3Test, ScalarMultiplicationInt) {
    vec3<int> v{2, 3, 4};
    vec3<int> result = v * 3;
    EXPECT_EQ(result.x, 6);
    EXPECT_EQ(result.y, 9);
    EXPECT_EQ(result.z, 12);
}

TEST(Vec3Test, ScalarDivisionFloat) {
    vec3<float> v{10.0f, 12.0f, 14.0f};
    vec3<float> result = v / 2.0f;
    EXPECT_FLOAT_EQ(result.x, 5.0f);
    EXPECT_FLOAT_EQ(result.y, 6.0f);
    EXPECT_FLOAT_EQ(result.z, 7.0f);
}

TEST(Vec3Test, ScalarAdditionFriendInt) {
    vec3<int> v{1, 2, 3};
    vec3<int> result = 5 + v;
    EXPECT_EQ(result.x, 6);
    EXPECT_EQ(result.y, 7);
    EXPECT_EQ(result.z, 8);
}

TEST(Vec3Test, ScalarSubtractionFriendFloat) {
    vec3<float> v{1.0f, 2.0f, 3.0f};
    vec3<float> result = 5.0f - v;
    EXPECT_FLOAT_EQ(result.x, 4.0f);
    EXPECT_FLOAT_EQ(result.y, 3.0f);
    EXPECT_FLOAT_EQ(result.z, 2.0f);
}

TEST(Vec3Test, ScalarMultiplicationFriendInt) {
    vec3<int> v{2, 3, 4};
    vec3<int> result = 3 * v;
    EXPECT_EQ(result.x, 6);
    EXPECT_EQ(result.y, 9);
    EXPECT_EQ(result.z, 12);
}

TEST(Vec3Test, ScalarDivisionFriendFloat) {
    vec3<float> v{2.0f, 3.0f, 4.0f};
    vec3<float> result = 10.0f / v;
    EXPECT_FLOAT_EQ(result.x, 5.0f);
    EXPECT_FLOAT_EQ(result.y, 10.0f / 3.0f);
    EXPECT_FLOAT_EQ(result.z, 2.5f);
}
